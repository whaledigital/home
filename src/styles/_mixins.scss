@mixin fit {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@mixin vertically-responsive($property, $number) {
  #{$property}: $number;

  @supports (--css: variables) {
    #{$property}: calc(#{$number} * var(--scale-element));
  }
}

// segment customisable per-component / instance rather than being forced to work around defaults.
@mixin segment (
  $padding-top: $segment-padding,
  $padding-bottom: $segment-padding,
  $padding-top-mobile: $segment-padding-mobile,
  $padding-bottom-mobile: $segment-padding-mobile) {

  // set up unitless values
  $padding-top-mobile-unitless: strip-unit($padding-top-mobile);
  $padding-bottom-mobile-unitless: strip-unit($padding-bottom-mobile);
  $padding-top-unitless: strip-unit($padding-top);
  $padding-bottom-unitless: strip-unit($padding-bottom);

  @include vertically-responsive(padding-top, $padding-top-mobile-unitless * 1px);
  @include vertically-responsive(padding-bottom, $padding-bottom-mobile-unitless * 1px);

  @media (min-width: $min-tablet) {
    @include vertically-responsive(padding-top, percentage(($padding-top-unitless * 1px) / $page-limit));
    @include vertically-responsive(padding-bottom, percentage(($padding-bottom-unitless * 1px) / $page-limit));
  }

  @media (min-width: $page-limit) {
    @include vertically-responsive(padding-top, $padding-top-unitless * 1px);
    @include vertically-responsive(padding-bottom, $padding-bottom-unitless * 1px);
  }
}

@mixin container() {
  margin: 0 auto;
  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;
  max-width: $page-width + $container-gutter-mobile * 1;

  @media (min-width: $min-mobile) {
    max-width: $page-width + $container-gutter-mobile * 2;
  }

  @media (min-width: $min-tablet) {
    padding-left: $container-gutter-tablet;
    padding-right: $container-gutter-tablet;
    max-width: $page-width + $container-gutter-tablet * 2;
  }

  @media (min-width: $min-desktop) {
    padding-left: $container-gutter-desktop;
    padding-right: $container-gutter-desktop;
    max-width: $page-width + $container-gutter-desktop * 2;
  }
}

// change below to reflect your project
@mixin heading() {
  // per project
}

@mixin subheading() {
  // per project
}

// html.js / html.no-js will not compile?!
// hence these workaround selectors
@mixin js-only {
  html:not(:global(.no-js)) & {
    @content;
  }
}

@mixin no-js {
  html:not(:global(.js)) & {
    @content;
  }
}

@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (-o-min-device-pixel-ratio: 13/10),
    only screen and (min-resolution: 120dpi) {
    @content;
  }
}

// gsap trans-in defaults
@mixin will-animate($transform: true, $opacity: true) {
  @include js-only {
    @if $opacity == true {
      opacity: 0;
    }

    @if $transform == true {
      will-change: opacity, transform;
    }

    @else {
      will-change: opacity;
    }
  }
}
